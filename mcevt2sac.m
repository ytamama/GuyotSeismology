function corrpieces=mcevt2sac(rowdata,measval,makeplot,intstart,intend,frequency)
%
% Function that takes in a row of IRIS catalog data, generated by 
% mcms2evt, and finds the .miniseed files that may contain the event.
% Then, the function converts that .miniseed file into a SAC file and 
% trims the SAC file into an interval surrounding the event's 
% approximate arrival time 
%
% Note: This function uses the SAC command 'cut' to trim SAC files
% down to the desired interval. An alternate version of this function,
% mcevt2sac_mat.m, reads the SAC file into MATLAB and cuts the file 
% there. However, that alternate version is experiencing issues due 
% to rounding issues in MATLAB (SAC's header variables are 
% single-precision, but MATLAB tries to convert them to double-precision). 
% 
% INPUTS
% rowdata : One row of IRIS catalog data, created by mcms2evt
%           Columns (left to right): eventID, date of event (as a string),
%           event latitude, event longitude, depth, event magnitude,
%           geoid distance from station to event (degrees), spherical 
%           distance from station to event (degrees), and travel time
%           of the first arrival to Guyot Hall (in seconds)
% measval : What do we want for the signal?
%           0 for displacement in nm (default if left empty)
%           1 for velocity in nm/s 
%           2 for acceleration in nm/(s^2)
% makeplot : Make a plot of the selected interval?
%            0 for no (default if left empty)
%            1 for yes
% intstart : The number of seconds before the arrival time that we want 
%            to start the interval (default: 60)
% intend :   The number of seconds after the arrival time that we want 
%            to end the interval (default: 360)
% frequency : The interval within which the deconvolution (during
%             instrument correction) will happen
%             Default: [0.01 0.02 10.00 20.00] Hz
% 
% OUTPUT(S)
% corrpieces : The instrument corrected SAC pieces, containing data 
%              for the chosen interval surrounding the event's approximate 
%              arrival time. Returns a cell array containing empty strings
%              if data are missing from the requested interval.
%              To be consistent with other programs using output from 
%              this program, the SAC files will be returned in the order:
%              {'Z';'Y';'X'}
%
% Also returns a plot of those SAC pieces, if requested
%
% References:
% Code to access SAC commands from MATLAB from mcms2mat.m,
% in csdms-contrib/slepian_oscar
%
% Uses dat2jul.m, in csdms-contrib/slepian_oscar
%
% Uses defval.m in csdms-contrib/slepian_alpha 
% 
% Consulted the SAC manual, from http://ds.iris.edu/files/sac-manual/
% 
% Last Modified by Yuri Tamama, 07/10/2020
% 
% See mcevttimes.m, makesac.m, plotsacdata.m
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Set default values
defval('intstart',60);
defval('intend',360);
defval('makeplot',0);
defval('measval',0);
defval('frequency',[0.01 0.02 10.00 20.00]); 

% Initialize cell array to save the names of the instrument 
% corrected SAC pieces
corrpieces={};

% Directories - Insert your own!
sacdir='';
% Place to save the final corrected SAC piece
sacpiecesave='';
% Uncorrected SAC pieces
intdir='';
% Response files
respfmt='PP.S0001.00.HH%s.resp';
respfmt=fullfile('',respfmt);
% Save plot
plotdir='';

% Speaking of instrument correction, we need to know what we want 
% the SAC files to measure! 
if measval==1
  valtype='vel';
  valtype2='vel';
elseif measval==2
  valtype='acc';
  valtype2='acc';
else
  valtype='none';  
  valtype2='disp';
end

% Total length of interval
inttotal=intstart+intend;
if inttotal>3600
  warning('Intervals longer than 1 hour are discouraged.')
end 

% Find the arrival time, the start and end times of the interval, and 
% the taper buffer times around that interval
[pretime,arrtime,~,prebuffer,postbuffer]=mcevttimes(...
    rowdata,1,intstart,intend);
% Arrival time
arryear=arrtime.Year;
arrmon=arrtime.Month;
arrday=arrtime.Day;
arrhr=arrtime.Hour;
arrmin=arrtime.Minute;
arrsec=arrtime.Second;
arrjd=dat2jul(arrmon,arrday,arryear);
% Convert times to strings, to name files
yearstr=num2str(arryear);
hrstr=datenum2str(arrhr,0);   
minstr=datenum2str(arrmin,0);     
secstr=datenum2str(floor(arrsec),0);   
jdstr=datenum2str(arrjd,1);
% Interval start
preyear=pretime.Year;
premon=pretime.Month;
preday=pretime.Day;
prejd=dat2jul(premon,preday,preyear);
prehr=pretime.Hour;
premin=pretime.Minute;
presec=pretime.Second;
% Taper buffer start
prebuffhr=prebuffer.Hour;
prebuffmin=prebuffer.Minute;
prebuffsec=prebuffer.Second;  
% Taper buffer end
postbuffhr=postbuffer.Hour;
postbuffmin=postbuffer.Minute;
postbuffsec=postbuffer.Second;
% Interval Lengths
inttotal2=num2str(seconds(postbuffer-prebuffer));
inttotalstr=num2str(inttotal);

% Other strings needed for naming files
% Frequencies
freqstr1=num2str(frequency(1));
freqstr2=num2str(frequency(2));
freqstr3=num2str(frequency(3));
freqstr4=num2str(frequency(4));
% Event ID
evtstr=num2str(rowdata.Var1); 
    
% Iterate through each component to generate SAC pieces
components={'Z';'Y';'X'};
for c=1:3
  component=components{c};
  % File names to use later
  uncorrpiece=sprintf(...
    '%s.%s.%ss.HH%s.%s.%s.%s%s%s.freqs%s%s%s%s.uncorr.SAC',...
    evtstr,valtype2,inttotal2,component,yearstr,jdstr,hrstr,minstr,...
    secstr,freqstr1,freqstr2,freqstr3,freqstr4);
  corrpiece=sprintf(...
    '%s.%s.%ss.HH%s.%s.%s.%s%s%s.freqs%s%s%s%s.corr.SAC',...
    evtstr,valtype2,inttotalstr,component,yearstr,jdstr,hrstr,minstr,...
    secstr,freqstr1,freqstr2,freqstr3,freqstr4);
  
  % Do we need 1 hourly miniseed/SAC or more?
  hrspassed1=ceil(hours(postbuffer-prebuffer));
  hrspassed2=postbuffhr-prebuffhr;
  if (postbuffhr==0)&&(prebuffhr==23)
    hrspassed2=1;  
  end
  hrspassed=max(hrspassed1,hrspassed2);
  if (postbuffhr==prebuffhr) && floor(hours(postbuffer-prebuffer))==0
    hrspassed=0;
  end
  % Need these to put away hourly SAC files, later
  hrsacfiles=cell(hrspassed+1,1);
  sacsavedirs=cell(hrspassed+1,1);
  % 1 hour
  if hrspassed<1
    % Place to save the SAC files, excluding the resulting pieces
    sacfilesave=fullfile(sacdir,'');
    % Create the hourly SAC file
    sacname=makesac(arrtime,component);
    % If no SAC file was created, exit the function
    if isempty(sacname)
      timetext=sprintf('%s/%s/%s %s:00:00',datenum2str(arryear,0),...
        datenum2str(arrmon,0),datenum2str(arrday,0),datenum2str(arrhr,0));
      fprintf(...
        'A SAC file could not be created for %s in %s. Exiting function.',...
        timetext,component)
      corrpieces=vertcat(corrpieces,'');
      continue
    else      
      hrsacfiles{1}=sacname;
      sacsavedirs{1}=sacfilesave;
      % Find where to trim the SAC file
      bufferstart=(prebuffmin*60)+prebuffsec;
      bufferend=(postbuffmin*60)+postbuffsec;  
      uncorrpiece=sacname;
    end
  % More than 1 hourly miniseed/SAC  
  else
    % Iterate through each hour between the start of the taper 
    % buffer to the end of it, encompassing the interval
    mcdate=prebuffer;
    readcmd='r %s';
    for i=1:hrspassed+1
      % Generate hourly SAC file
      sacname=makesac(mcdate,component);
      % If no SAC file was created, exit the function
      timetext=sprintf('%s/%s/%s %s:00:00 %s',num2str(mcdate.Year),...
        datenum2str(mcdate.Month,0),datenum2str(mcdate.Day,0),...
        datenum2str(mcdate.Hour),component);
      if isempty(sacname)
        fprintf(...
          'A SAC file could not be created for %s in %s.',...
          timetext, component)
        corrpieces=vertcat(corrpieces,'');
        break
      end      
      % Construct a SAC command to read those files
      readcmd=sprintf(readcmd,sacname);
      if i<(hrspassed+1)
        readcmd=strcat(readcmd,' %s');   
      end
      % Move onto the next hour
      mcdate.Hour=mcdate.Hour+1;
      sacfilesave=fullfile(sacdir,'');
      sacsavedirs{i}=sacfilesave;
      hrsacfiles{i}=sacname;
    end
    % Merge the SAC files!
    % Accessing SAC from MATLAB from mcms2mat.m
    mergecmd=sprintf(...
      'echo "%s ; merge ; w %s ; q" | /usr/local/sac/bin/sac',...
      readcmd,uncorrpiece);
    [status,cmdout]=system(mergecmd);
    % Where to cut merged file to taper buffers
    bufferstart=(prebuffmin*60)+prebuffsec;
    bufferend=(postbuffmin*60)+postbuffsec+3600*hrspassed;      
  end    
  
  % Cut the SAC file at the taper buffers, and instrument correct!
  respfile=sprintf(respfmt,component);
  transfer=sprintf(...
    'transfer from evalresp fname %s to %s freqlimits %g %g %g %g prewhitening on',...
    respfile,valtype,frequency(1),frequency(2),frequency(3),frequency(4));
  corrcmd=sprintf(...
    'echo "r %s ; cut %g %g ; read ; rtr ; rmean ; taper type ; %s ; w %s ; q" | /usr/local/sac/bin/sac',...
    uncorrpiece,bufferstart,bufferend,transfer,corrpiece);
  [status,cmdout]=system(corrcmd);
  
  % Cut off the taper buffers and adjust header
  startpt=bufferstart+seconds(pretime-prebuffer);
  endpt=startpt+inttotal;
  newend=endpt-startpt;
  cutcmd=sprintf(...
    'echo "r %s ; cut %g %g ; read ; chnhdr B 0 E %g ; w %s ; q" | /usr/local/sac/bin/sac',...
    corrpiece,startpt,endpt,newend,corrpiece);
  [status,cmdout]=system(cutcmd);
  % New header variables
  hdrjd=prejd;
  hdrhr=prehr;
  hdrmin=premin;
  hdrsec=floor(presec/1);
  hdrmsec=round(mod(presec,1)*1000);
  hdrevla=round(rowdata.Var3,1);
  hdrevlo=round(rowdata.Var4,1);
  hdrevdp=round(rowdata.Var5,1);
  hdrmag=round(rowdata.Var6,1);
  hdrchange=sprintf(...
    'chnhdr NZJDAY %d NZHOUR %d NZMIN %d NZSEC %d NZMSEC %d EVLA %g EVLO %g EVDP %g MAG %g LCALDA TRUE',...
    hdrjd,hdrhr,hdrmin,hdrsec,hdrmsec,hdrevla,hdrevlo,hdrevdp,...
    hdrmag);
  hdrcmd=sprintf(...
    'echo "r %s ; %s ; w %s ; q" | /usr/local/sac/bin/sac',...
    corrpiece,hdrchange,corrpiece);
  [status,cmdout]=system(hdrcmd);
  % Save the hourly SAC files, in their proper arrays
  for i=1:length(hrsacfiles)
    hourlysac=hrsacfiles{i};
    hourlydir=sacsavedirs{i};
    [status,cmdout]=system(sprintf('mv %s %s',hourlysac,hourlydir));
  end
  % Save the SAC pieces, corrected and uncorrected
  [status,cmdout]=system(sprintf('mv %s %s',uncorrpiece,intdir));
  [status,cmdout]=system(sprintf('mv %s %s',corrpiece,sacpiecesave));
  % Add the name of the final SAC piece to the cell array
  corrpiece=fullfile(sacpiecesave,corrpiece);
  corrpieces=vertcat(corrpieces,corrpiece); 
end    

% If we're making a plot
if makeplot==1
  evtid=rowdata.Var1;
  depth=rowdata.Var5;
  magnitude=rowdata.Var6;
  % Use the Great Circle distance
  gcarc=rowdata.Var7;
  [seisplot,figname]=plotsacdata(1,corrpieces,measval,frequency,...
    1,1,plotdir,arrtime,evtid,magnitude,gcarc,depth,intstart,intend);
end

